.data
_print_fmt_i: .asciz "%d"
_println_fmt_i: .asciz "%d\n"
_argc: .asciz "argc: %d\n"
_argv: .asciz "argv[%d]: %s\n"

.text
.globl main
_builtin_wrap_printf_i:
  addi sp, sp, -16
  sd ra, 8(sp)
  sd s0, 0(sp)
  addi s0, sp, 16
  mv a1, a0
  la a0, _print_fmt_i
  jal ra, printf
  ld s0, 0(sp) 
  ld ra, 8(sp) 
  addi sp, sp, 16
  ret
_builtin_wrap_println_i:
  addi sp, sp, -16
  sd ra, 8(sp)
  sd s0, 0(sp)
  addi s0, sp, 16
  mv a1, a0
  la a0, _println_fmt_i
  jal ra, printf
  ld s0, 0(sp) 
  ld ra, 8(sp) 
  addi sp, sp, 16
  ret
len:
  addi sp, sp, -16
  sd ra, 8(sp)
  sd s0, 0(sp)
  addi s0, sp, 16
  ld a0, 0(a0)
  ld s0, 0(sp)
  ld ra, 8(sp)
  addi sp, sp, 16
  ret
main:
  addi sp, sp, -16
  sd ra, 0(sp)
  sd s0, 8(sp)
  addi s0, sp, 16
  jal ra, _internal_init

  mv s1, a0 # s1 = argc
  mv s2, a1 # s2 = argv
  mv s3, a0 # s3 = argc (will not change)

  # print argc
  la a0, _argc
  mv a1, s1
  jal ra, printf

  # while argc > 0
  start_loop:
  beqz s1, end_loop
  # printf argv[i]
  la a0, _argv
  sub a1, s3, s1
  ld a2, 0(s2)
  jal ra, printf
  addi s1, s1, -1 # argc -= 1
  addi s2, s2, 8  # *argv + 8
  j start_loop
  end_loop:

  ld ra, 0(sp)
  ld s0, 8(sp) 
  addi sp, sp, 16
  ret
_internal_malloc:
  addi sp, sp, -16
  sd ra, 8(sp)
  sd s0, 0(sp)
  addi s0, sp, 16
  jal ra, malloc
  ld s0, 0(sp) 
  ld ra, 8(sp) 
  addi sp, sp, 16
  ret
_internal_init:
  addi sp, sp, -16
  sd ra, 8(sp)
  sd s0, 0(sp)
  addi s0, sp, 16
  ld s0, 0(sp) 
  ld ra, 8(sp) 
  addi sp, sp, 16
  ret